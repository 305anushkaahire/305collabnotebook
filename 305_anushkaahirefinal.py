# -*- coding: utf-8 -*-
"""305_anushkaahirefinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DUEfRe4WeKgZbhJj2p4uQBFbI2IXseY2
"""

wdef sayHello():
  print("Welcome to python")
sayHello()
def even():
      print("Enter a number")
      num=int(input())
      if(num%2==0):
        print(num,"is even")
      else:
        print(num,"is odd")
even()



import pandas as pd
df=pd.read_excel("")

#basic list operations append(),insert(),extend() functions
# append() : appends and adds the specified element to list adds the specified element
L1=[10,20,"Python",94.2,314]
L1.append(21)
print(L1)

#insert() will insert an element at the specified position
L1=["Python","Java","Essentials of data science"]
print(L1)
L1.insert(2,"Hadloop")
print(L1)

#extend() this function adds the elements of parameter list with invoking list
# list1.extends(list2)
L1=[10,20,30]
L2=[15,35,45,55]
L1.extend(L2)
print(L1)

L1=[485,21.344,"Python",25678]
a=L1.__len__()       # function returns the length of list
print(a)

a=25
print("a as int",a)
b=54868
print("b as long",b)
c=14.25
print("c as float",c)
d=3.14j
print("d as complex",d)
str1="Welcome to python"
print(str1)
l1=[15,25.6,"python"]
print(l1)
t1=(21,"python",21.45)
print(t1)
d1={"Aradhana": 21,"Prarthana":100,"Rugved":23}
print(d1)

n1=int(input())
n2=int(input())
n3=int(input())
if n1>n2 and n1>n3 :
    print(n1,"is largest")
if n2>n1 and n2>n3 :
  print(n2,"is largest")
if n3>n1 and n3>n2 :
  print(n3,"is largest")
print("Enter a number")
num=int(input())
if num%2==0:
  print(num,"is even")
else:
  print(num,"is odd")
n1=int(input())
n2=int(input())
n3=int(input())
if n1>n2:
  if n1>n3:
    print(n1,"is largest")
if n2>n1:
  if n2>n3:
    print(n2,"is largest")
if n3>n1:
  if n3>n2:
    print(n3,"is largest")
print("main area ends")
print("Enter any number")
num=int(input())
print(num,"is even") if num%2==0 else print(num,"is odd")

#datatype and object related functions
#type()returns the type of parameter
a= 10
b= True
c=16.55
d=[10,20,30]
print(type(a))
print(type(b))
print(type(d))
# abs() returns the absolute value of provided number
print(abs(15))
# all() this function takes sequence (list,tuple,string) as a parameter
# returns true if all values in parameter are true
L1=["","",""]
L2=["a","",""]
L3=[True,True]
L4=[True,False]
L5=[False,False]
a=all(L1)
b=all(L2)
c=all(L3)
d=all(L4)
e=all(L5)
print(a)
print(b)
print(c)
print(d)
print(e)

L1=["a","b","c",12,21.34]
L2=["a","",""]
L3=[True,True]
L4=[True,False]
L5=[False,False]
a=all(L1)
b=all(L2)
c=all(L3)
d=all(L4)
e=all(L5)
print(a)
print(b)
print(c)
print(d)
print(e)

#code to print list of students and their marks , using while loop
n=int(input("enter the number of students"))
i=0
while i<n:
  r=int(input("roll no. :"))
  m1=int(input("marks for subject 1:"))
  m2=int(input("marks for subject 2:"))

  i=i+i
  print([r,m1,m2])

i=1
while i<10:
  print("Welcome")
  i=i+1

print("Enter a value ")
num = int(input())
sum=0
i=1
while i<num:
  sum = sum + i
  i=i+i
print("Sum",sum)
# for loop
l1 = ["C++","Java","Python",21,45.78]
for i in l1:
  print("loop refers to book",i)

weather = input("What is the weather today?")
if weather == "Sunny":
  print("It is a great day to go for picnic!")
elif weather =="Cloudy":
  print("Don't forget to bring a jacket in case it rains.")
elif weather == "Rainy":
  print("Remember to bring an umbrella!")
else:
  print("Sorry,I don't understand that weather condition.")

weather=input("What is the weather today?")
if weather =="Sunny":
  print("It is a great day to go for a picnic!")

print(callable(type))
print(callable(all))
print(callable([10,20,30]))
print(callable("Python"))

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/employee.xlsx')
print(df)
df1=pd.read_excel(r'/content/drive/MyDrive/salary.xlsx')
print(df1)

import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/employee.xlsx')
print(df)
df['Age'].mean()

import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/employee.xlsx')
print(df)
df['Age'].mode()

import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/employee.xlsx')
print(df)
df['Age'].median()

import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/employee.xlsx')
print(df)
df['Age'].std()

display(df,df1)

import pandas as pd
df1=pd.read_excel(r'/content/drive/MyDrive/salary.xlsx')
def sal():
  import pandas as pd
  a= df1.sort_values(by=['Salary'], ascending=False)
  a.nlargest(5,'Salary','first')
  print(a)
sal()

#merge data sets
import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/employee.xlsx')
print(df)
df1=pd.read_excel(r'/content/drive/MyDrive/salary.xlsx')
print(df1)

a=pd.merge(df,df1)
display(a)

import pandas as pd
import matplotlib.pyplot as plt
df=pd.read_excel(r'/content/drive/MyDrive/employee.xlsx')
plt.plot(df['Age'])
#var.head()

plt.show()

import matplotlib.pyplot as plt
import pandas as pd
file = pd.read_excel('/content/drive/MyDrive/employee.xlsx')
x_axis = file['Employee ID']
y_axis = file['Age']
plt.bar(x_axis, y_axis, width=0.1)
plt.xlabel("X-Axis")
plt.ylabel("Y-Axis")
plt.show()

#without lambda function square
def square(num):
  return num*num
print(square(2))

#using lambda function square
square = lambda num:num*num
print(square(2))

#using lambda function circle
area = lambda R:3.14*R*R
print(area(2))

#using lambda function rectangle
rec = lambda l,b:l*b
print(rec(2,2))

#using lambda function
cube = lambda num:num*num*num
print(cube(2))

#using lambda function circle
vol = lambda R:(4/3)*3.14*R*R*R
print(vol(10))

#dictionary operations
dict1 = {"ABC":2742023,"EDF":89}
print(dict1)        #print dictionary
print(dict1.keys())     #reteriving keys from dictionary
print(dict1.values())    #reteriving values from dictionary
dict1.update({"SCE":8-9-2022})   #update dictionary
print(dict1)
a = dict1.__len__()    #finding length of dictionary
print(a)
dict1.pop("SCE")   #pop an elemnt from dictionary
print(dict1)

import pandas as pd
dict1= {
    "Name": ['Anushka','Devansh','Priyanka'],
    "City":['Pune','Delhi','Banglore'],
    "Age":[19,20,22]
    }
df2=pd.DataFrame(dict1)
df2



import pandas as pd
import numpy as np
dict1 = {"Name" : ['Anushka','Devansh','Priyanka','Riddhi','Ayoobroo'],
    "Marks":[90,30,40,55,70],
    "City":['Pune','Nashik','Delhi','Banglore','kerala']}
df=pd.DataFrame(dict1)
df.to_csv("friends.csv")
df.to_csv("fInfalse.csv",index=False)
df.describe()

# Playing with Dictionaries
dict1={"Anushka": 200,"Avlon":2000}
print(dict1)
print(dict1.__len__())
dict1.update({"Ion": 1999})
print(dict1)
print(dict1.keys())
print(dict1.values())
dict1.pop("Avlon")
print(dict1)

import pandas as pd

dict2 = {"Name" : ['Anushka','Devansh','Priyanka','Riddhi','Ayoobroo'],
    "Marks":[90,30,40,55,70],
    "City":['Pune','Nashik','Delhi','Banglore','kerala']}
df=pd.DataFrame(dict2)
print(df)
print(dict2.values())
dict2.update({"age":[19,20,22,21,24]})
print(dict2)

# Create a list of numbers
numbers = [2, 5, 1, 8, 4]

# Append an element to the end of the list
numbers.append(9)
print(numbers)

# Extend the list with another list
numbers.extend([3, 7])
print(numbers)

# Insert an element at a specific position in the list
numbers.insert(3, 6)
print(numbers)

# Remove the first occurrence of an element from the list
numbers.remove(4)
print(numbers)

# Pop an element from the list (remove and return the last element by default)
popped_element = numbers.pop()
print(popped_element)
print(numbers)
index_of_2 = numbers.index(2)
print(index_of_2)
# Clear all elements from the list
numbers.clear()
print(numbers)

# Fill the list with a specific value
numbers = [0] * 5
print(numbers)

# Reverse the order of the elements in the list
numbers.reverse()
print(numbers)

# Sort the elements in the list in ascending order
numbers.sort()
print(numbers)

# Count the number of occurrences of an element in the list
count_of_5 = numbers.count(5)
print(count_of_5)

# Get the index of the first occurrence of an element in the list
# index_of_2 = numbers.index(2)
# print(index_of_2)

# Copy the list to a new list (not just a reference)
new_numbers = numbers.copy()
print(new_numbers)

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
df=pd.read_csv("/content/sample_data/mnist_train_small.csv")
print(df)

#set operations
s1={30,60,50,40}
s2={50,80,90,20,10}
s1.add(70)
print(s1)

s2.update((30,40))
print(s2)

s1.remove(50)
print(s1)

s2.discard(60)
print(s2)

#union
a=s1|s2
print(a)
#intersection
b=s1&s2
print(b)
#subtraction
c=s2-s1
print(c)
#symmetric difference
d=s2^s1
print(d)

p1={"shraddha","aishwarya","samantha","rashmika","priyankachopra"}
p2={"zendaya","scarlettjohannson","shakira","gal gadot","priyankachopra"}
print(p1|p2)
print(p1&p2)
print(p1-p2)
print(p2-p1)
print(p1^p2)

bill=float(input("Enter the amount of Bill: Rs."))
tip=float(input("what percent of bill amount ,would you like to pay as tip :"))
bill_with_tip = bill + (tip/100)*bill
print("The total bill amount is:",bill_with_tip)
people = int(input("Enter the no. of persons paying:"))
bill_per_person = bill_with_tip/people
print("Each person will pay :Rs.",bill_per_person)
print("Thank You!")

lst = ["sam",'we','doc']
for items in lst:
  print(items)

for x in range(50,120,20):
  if x%2==0:
    print(x)



import pandas as pd
file =pd.read_excel("/content/drive/MyDrive/employee.xlsx")
#print(file)
file['Age'].std()
file['Age'].mean()
file.info()
file.describe()
file['Employee ID'].min()
print(file)

l1=[10,"Anushka",25,40]
l2=[30,"Jennie",8,45,True]
l3=l1+l2
print(l3)

l4= [*l1,*l2]
print(l4)

import pandas as pd
lst=['a','p','o','o','r','v','a']
lst2=[11,22,33,44,55,66,77]

df=pd.DataFrame(list(zip(lst,lst2)),
               columns=['Name','val'])
df

# combining list using concat
import pandas as pd
df1=pd.DataFrame([["anushka","devansh","priyanka"],["comp","comp","etx"]])
df2=pd.DataFrame([["anushka","devansh","priyanka"],[1,2,3]])
df3=pd.concat([df1,df2])
display(df3)

# importing datetime module for now.)
import datetime
# using now() to get current time
current_time = datetime.datetime.now()
# Printing attributes of now().
print ("The attributes of now() are : ")
print ("Day: ", end = "")
print (current_time.day)
print ("Year: ", end = "")
print (current_time.year)
print ("Month: ",end = "")
print (current_time.month)

from datetime import date
def calculateAge (dob):
    today = date.today() # today's date
    #check if current month and date are less than birth month and day
    age = today.year - dob.year -((today.month, today.day)<(dob.month, dob.day))
    return age
print(calculateAge (date (2004, 2, 28)), " years old") # function call

d = float (input ("Enter currency"))
s = d*81
print (round (s,2))

import pandas as pd
def t(l):
  return l*10
l=[1,2,3,4,5]
df=pd.DataFrame(l)
newdf=df.transform(t)
print(newdf)

bruh=("anushka","devansh","priyanka","kali")
list1=[11,12,13,14]
list2=list(bruh)
print(list1+list2)

a=[10,20,30,40,50]
b=[11,12,13,14]
c=(a[3]==40 and b[1]==12)
if (c==True):
  print("woohoo")
else:
   print("nahh")

a=[10,20,30,40,50]
b=[11,12,13,14]
c=(a==[10,20,30,40,50] and b==[11,12,13,14])
if (c==True):
  print("woohoo")
else:
   print("nahh")

for i in a:
  print(i)

gg=["anushka","devansh","priyanka","kali"]
for i in gg:
  print(i)
  for s in i:
    print(s)

#if nested the code breaks at false
#if normal we get the outputs for true

# given is a list []
if
  while
       if
       #(if it is false it wont go ahead)
        while
             for

while 1>0:
  print(hello)
   #infinite hello prints

print(type(5/2))    # int/int is always float
print(type(5//2))     # if '//' the answer does not come in point

set1 ={1,True,False}
print(set1)

# array operations in python

import pandas as pd
import numpy as np

df=pd.read_excel(r'/content/drive/MyDrive/employee.xlsx')
df1=pd.read_excel(r'/content/drive/MyDrive/salary.xlsx')

array =df.to_numpy()
array1 =df1.to_numpy()

print(array)
print(array1)

import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/employee.xlsx')
print(df)

df['Employee Name'].head()   # if only head() is taken it takes the value as 5

df['Employee Name'].head(10)

# create a new column
df['Attendence']=85
print(df)



# create a new column
df['Attendence'][0:6]=75
print(df)

import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/employee.xlsx')
print(df)


df.columns = ['Employee ID','Employee Name','Date of birth','Age','Attendence']
print(df.columns)

import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/employee.xlsx')
print(df)

print("Addition of matrix")
print(df.add(array,array1))

#the sales file I made
import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/SalesFinal.xlsx')
print(df)

#The most Popular product using list
df = pd.read_excel('/content/drive/MyDrive/SalesFinal.xlsx')
myproduct = df['Product'].tolist()
print(" ====================================================")
print("                                                    ")
print("  Most popular product in the list is ---  ", max(myproduct,key=myproduct.count) )
print("                                                    ")
print(" ====================================================")

#The most popular supplier using dictionary
dict1 = df["Supplier"].to_dict()
print("                                              ")
print(dict1)
print("                                              ")
#from statistics import mode
best_supplier = mode(dict1.values())
print(" =============================================")
print("                                              ")
print('The best supplier is :',best_supplier)
print("                                              ")
print(" =============================================")

#The Customer who buys most products using tuple
tup = tuple(df["Customer"])
def buys_most(tup):
	return max(set(tup), key = tup.count)
print(" =============================================")
print("                                              ")
print('The Customer who buys most products is :',buys_most(tup))
print("                                              ")
print(" =============================================")

#The number of females using list
import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/SalesFinal.xlsx')
#print(df)
df = pd.read_excel('/content/drive/MyDrive/SalesFinal.xlsx')
Gender_count = df['Gender'].tolist()
#print(Gender_count)
print(" =============================================")
print("                                              ")
print(" The number of females are :- ",Gender_count.count("Female"))
print("                                              ")
print(" =============================================")

#The most popular supplier using dictionary ( do not use in presewntation)
dict1 = df.to_dict()
print("")
print(dict1)
print("")
print(" ====================================================")
print("")
print("Most popular supplier's are : ", df["Supplier"].mode())
print("")
print(" ====================================================")

#the file our college provided
import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/Salescollege.xlsx')
print(df)

#The most Popular product using list
df = pd.read_excel('/content/drive/MyDrive/Salescollege.xlsx')
myproduct = df['Product details'].tolist()
print(" ====================================================")
print("                                                    ")
print("  Most popular product in the list is ---  ", max(myproduct,key=myproduct.count) )
print("                                                    ")
print(" ====================================================")

#The most popular supplier using dictionary
dict1 = df["Supplier Details"].to_dict()
print("                                              ")
print(dict1)
print("                                              ")
#from statistics import mode
best_supplier = mode(dict1.values())
print(" =============================================")
print("                                              ")
print('The best supplier is :',best_supplier)
print("                                              ")
print(" =============================================")

#The Customer who buys most products using tuple
tup = tuple(df["Customer Details"])
def buys_most(tup):
	return max(set(tup), key = tup.count)
print(" =============================================")
print("                                              ")
print('The Customer who buys most products is :',buys_most(tup))
print("                                              ")
print(" =============================================")

#The number of females using list
Gender_count = df['Gender'].tolist()
#print(Gender_count)
print(" =============================================")
print("                                              ")
print(" The number of females are :- ",Gender_count.count("Female"))
print("                                              ")
print(" =============================================")

l1=[10,"Mark",25,40]    #list operation
l2=[30,"Jennie",8,45]
l1.extend("Mark")   #prints 'm  a  r  k' at the end
l1.append("Mark")    #prints mark at the end
l1.insert(40,50)
l2.append(30)
l2.extend("Jennie")
l2.remove(8)  #removes '8'
print(l1)
print(l2)

#Write 3 lambda fucntions
#area of a sphere
area = lambda R:4*3.14*R*R
print("====================")
print(" 1.) The area of sphere is",area(10))
print("====================")

#using lambda function rectangle
rec = lambda l,b:l*b
print("====================")
print(" 2.) The area of rectangle is",rec(3,2))
print("====================")

#using lambda function
cube = lambda num:num*num*num
print("====================")
print(" 3.) The cube is",cube(4))
print("====================")

#Create a dictionary and convert it into a dataframe
import pandas as pd
taylor= {
    "Album": ['Reputation','Lover','Midnights','1989'],
    "song":['Endgame','SYGB','SOTB','Bad Blood'],
    "Feat":['Ed sheeran','The chicks','lana D.R',0]
    }
Swift=pd.DataFrame(taylor)
print(Swift)

#mean ( cannot use on strings)
import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/employee.xlsx')
print("====================")
print(df)
print("====================")
df['Employee ID'][1]=1004
df['Age'].mean()

import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/Example.xlsx')
print("====================")
print(df)
print("====================")
df['Age'].mean()

import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/Example.xlsx')
print("====================")
print(df)
print("====================")
df['Age'].mode()

import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/Example.xlsx')
print("====================")
print(df)
print("====================")
df['Age'].median()

import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/Example.xlsx')
print("====================")
print(df)
print("====================")
df['Age'].std()



import pandas as pd
cs=pd.read_csv(r'/content/sample_data/california_housing_train.csv')
cs.describe()

cs.info()



import pandas as pd
df = pd.read_csv("/content/drive/MyDrive/#305.csv")
df1 = pd.read_csv("/content/drive/MyDrive/Sall.csv")
df2 = pd.merge(df,df1,on = "ID")
df2.to_csv("Empl.csv",index = False)
merged_df =pd.read_csv("/content/Empl.csv")
print(merged_df)
avg = merged_df.mean()
max = merged_df.max()
min = merged_df.min()
count = merged_df.count()
sum = merged_df.sum()
percent = merged_df.mean() / merged_df.count() * 100
# RESULTS
print("Average:\n", avg)
print("Max:\n", max)
print("Min:\n", min)
print("Count:\n", count)
print("Sum:\n", sum)
print("Percentage:\n", percent)

#Data
import csv
f1=open("/content/toyota1.csv","r")
d1=list(csv.reader(f1,delimiter=","))
print("File Contents:",d1)

#Age
age=[]
km=[]
highcost=[]
hp=[]
fuel=[]
with open("/content/toyota1.csv", mode="r") as file:
  filecont=csv.reader(file)
  for lines in filecont:
    age.append(lines[1])

print(age)

#Average age of cars
age1=age[1::]
print(age1)
l=len(age1)
print("Average Age: ", int(789/l))

#Price of less used car and highly used car
with open("/content/toyota1.csv", mode="r") as file:
  filecont=csv.reader(file)
  for lines in filecont:
    km.append(lines[2])
km1=km[1::]

print(km1)
print("Price of Less used car: ", min(km1))
print("Price of Most used car: ", max(km1))

#Count of hp
with open("/content/toyota1.csv", mode="r") as file:
  filecont=csv.reader(file)
  for lines in filecont:
    hp.append(lines[4])

print(hp)
print("Sum of all HP: ", int(3449))

#Fueltype of cheapest car
with open("/content/toyota1.csv", mode="r") as file:
  filecont=csv.reader(file)
  for lines in filecont:
    fuel.append(lines[0])

print(fuel)
print("Cheapest car price: ",min(fuel))
print("Fuel type of cheapest car: Diesel" )

import csv

def get_highest_marks(csv_file):
    highest_marks = 0

    with open(csv_file, 'r') as file:
        reader = csv.reader(file)


        next(reader)

        for row in reader:

            marks = float(row[0])

            if marks > highest_marks:
                highest_marks = marks

    return highest_marks

csv_file_path = '/content/result1.csv'
highest_marks = get_highest_marks(csv_file_path)
print("Highest marks in 1st Sem:", highest_marks)


import csv

def calculate_average_marks(file_path):
    total_marks = 0
    num_students = 0

    with open(file_path, 'r') as csvfile:
        reader = csv.reader(csvfile)
        next(reader)

        for row in reader:
            if len(row) == 2:
                try:
                    marks = float(row[1])
                    total_marks += marks
                    num_students += 1
                except ValueError:
                    print(f"Skipping invalid mark: {row[1]}")

    if num_students > 0:
        average_marks = total_marks / num_students
        return average_marks
    else:
        return 0


file_path = '/content/result1.csv'
average_marks = calculate_average_marks(file_path)
print(f"The average marks of all students is: {average_marks}")
)

import csv

def get_highest_marks(csv_file):
    highest_marks = 0

    with open(csv_file, 'r') as file:
        reader = csv.reader(file)


        next(reader)

        for row in reader:

            marks = float(row[4])

            if marks > highest_marks:
                highest_marks = marks

    return highest_marks

csv_file_path = '/content/result1.csv'
highest_marks = get_highest_marks(csv_file_path)
print("Highest marks in 5th Sem:", highest_marks)

import csv

def get_highest_marks(csv_file):
    highest_marks = 0

    with open(csv_file, 'r') as file:
        reader = csv.reader(file)


        next(reader)

        for row in reader:

            marks = float(row[4])

            if marks > highest_marks:
                highest_marks = marks

    return highest_marks

csv_file_path = '/content/result1.csv'
highest_marks = get_highest_marks(csv_file_path)
print("Highest marks in 5th Sem:", highest_marks)

import csv

def get_total_female_students(csv_file):
    female_count = 0

    with open(csv_file, 'r') as file:
        reader = csv.reader(file)


        next(reader)

        for row in reader:

            gender = row[6]

            if gender.lower() == 'male':
                female_count += 1

    return female_count

csv_file_path = '/content/result1.csv'
total_female_students = get_total_female_students(csv_file_path)
print("Total number of female students:", total_female_students)

#reading
import pandas as pd

result = pd.read_csv('ign.csv')

print(result)

#writing
from pandas import DataFrame

C = {'Programming language': ['Python', 'Java', 'C++'],

     'Designed by': ['Guido van Rossum', 'James Gosling', 'Bjarne Stroustrup'],

     'Appeared': ['1991', '1995', '1985'],

     'Extension': ['.py', '.java', '.cpp'],

     }

df = DataFrame(C, columns=['Programming language', 'Designed by', 'Appeared', 'Extension'])

export_csv = df.to_csv(r'program_lang.csv', index=None, header=True)

#reading rows
import pandas as pd
data = pd.read_csv('path/input.csv')

# Slice the result for first 5 rows
print (data[0:5]['salary'])

#reading specific coloumns
import pandas as pd
data = pd.read_csv('path/input.csv')

# Use the multi-axes indexing funtion
print (data.loc[:,['salary','name']])

#reading specific coloumns and rows
import pandas as pd
data = pd.read_csv('path/input.csv')

# Use the multi-axes indexing funtion
print (data.loc[[1,3,5],['salary','name']])

#reading specific coloumns for a range of rows
import pandas as pd
data = pd.read_csv('path/input.csv')

# Use the multi-axes indexing funtion
print (data.loc[2:6,['salary','name']])

# for min and max
import pandas as pd

df=pd.read_csv('Name.csv')


#FINDING MAX AND MIN
p=df['ColumnName'].max()
q=df['ColumnName'].min()


print(q)

#marks more than
import pandas as pd

data = pd.read_csv('your_file.csv')
filtered_data = data[data['marks'] > 50]
print(filtered_data)

import pandas as pd

data = pd.read_csv('your_file.csv')

# Calculate column sum
column_sum = data['column_name'].sum()
print("Column Sum:", column_sum)

# Calculate row sum
row_index = 0  # Replace with the desired row index
row_sum = data.loc[row_index].sum()
print("Row Sum:", row_sum)

# calculating mean/average
import pandas as pd

data = pd.read_csv('your_file.csv')

# Calculate column average
column_average = data['column_name'].mean()
print("Column Average:", column_average)

# Calculate row average
row_index = 0  # Replace with the desired row index
row_average = data.loc[row_index].mean()
print("Row Average:", row_average)

#print colomn or row only
import pandas as pd

data = pd.read_csv('your_file.csv')

# Print a column
print(data['column_name'])

# Print a row
row_index = 0  # Replace with the desired row index
print(data.loc[row_index])

#read first 5 rows
import pandas as pd

data = pd.read_csv('your_file.csv')
print(data.head(5))

#number of females having more than 60
import pandas as pd

data = pd.read_csv('your_file.csv')
filtered_data = data[(data['gender'] == 'female') & (data['score'] > 60)]
print("Number of females with score > 60:", len(filtered_data))

# print no. of females
import pandas as pd

data = pd.read_csv('your_file.csv')
filtered_data = data[data['gender'] == 'female']
print("Number of females:", len(filtered_data))

#The len function is used to determine the length of an iterable object, such as a list, DataFrame, or Series. In this case, we apply the filter to the DataFrame to extract rows where the gender is 'female', and then use len to count the number of rows in the filtered DataFrame.

#taking out different things
import pandas as pd

data = pd.read_csv('your_file.csv')
college_codes = data['college_code'].unique()
num_college_codes = len(college_codes)
print("Number of different college codes:", num_college_codes)

#completed a certain thing
import pandas as pd

data = pd.read_csv('your_file.csv')
completed_prep = data[data['preparation_status'] == 'completed']
num_students_completed_prep = len(completed_prep)
print("Number of students who have completed preparation:", num_students_completed_prep)

# scores in reading or writing of females
import pandas as pd

data = pd.read_csv('your_file.csv')
filtered_data = data[(data['gender'] == 'female') & (data['reading_score'] > 60) & (data['writing_score'] > 60)]
print("Number of females with score > 60 in reading and writing:", len(filtered_data))

import matplotlib.pyplot as plt
import pandas as pd
file = pd.read_excel('/content/drive/MyDrive/employee.xlsx')
plt.pie(file['Age'],labels=file['Employee Name'])
plt.show()

#Create a dictionary and convert it into a dataframe
import pandas as pd
taylor= {
    "Name": ['Jennie','Lisa','Rose','Jisoo'],
    "City":['America','Thailand','Australia','Korea'],
    "Age":[27,26,26,28]
    }
df2=pd.DataFrame(taylor)
print(df2)

import pandas as pd
df = pd.read_csv("/content/drive/MyDrive/anushkahobbies2.csv")
print(df)

female_percentage = (df['Gender'].apply(lambda x: 1 if x == 'female' else 0).sum() / len(df['Gender'])) * 100
print("=====================================================")
print("1.)Female Percentage in",['Gender'], ":", female_percentage)
print("=====================================================")

filtered_data = df[(df['Gender'] == 'female') & (df['Projects']>2)]
print("2.)Number of females with projects more than 2 are-:", len(filtered_df))
print("=====================================================")

df.Age =df.Age.astype('int64')
df['Name'][df.Age>21]

import pandas as pd
df1 = pd.read_csv('/content/drive/MyDrive/anushkahobbies2.csv')
data = df1.values.tolist()

a = df1['Age']
b = df1['Name']

df1.Age = df1.Age.astype('int64')
d = df1['Name'][df1.Age>21]

def student(d):

  print('student:', d)

student(d)



import pandas as pd
df1 = pd.read_csv('/content/drive/MyDrive/anushkahobbies2.csv')
data = df1.values.tolist()

a = df1['Age']
b = df1['Gender']
c = df1['Name']

df1.Age = df1.Age.astype('int64')
d = ['Gender'][df1.Age>21]
c = df1['Name']
def student(d,c):

  print('student:', d,c)

student(d,c)

data = df[''].tolist()

import numpy as np

#dataset
names = np.array(['John', 'Emma', 'Michael', 'Sophia'])
ages = np.array([20, 22, 19, 21])
genders = np.array(['M', 'F', 'M', 'F'])
marks = np.array([85, 90, 78, 92])

#All Matrix operations
matrix = np.array([ages, marks])
transposed_matrix = np.transpose(matrix)
matrix_sum = np.sum(matrix)
matrix_mean = np.mean(matrix)
matrix_product = np.prod(matrix)

# Horizontal and vertical stacking
horizontal_stack = np.hstack((names.reshape(-1, 1), ages.reshape(-1, 1)))
vertical_stack = np.vstack((names, marks)).T

# Custom sequence generation
sequence = np.arange(0, 10, 2)

# Arithmetic and statistical operations
addition = np.add(ages, marks)
subtraction = np.subtract(ages, marks)
mean = np.mean(marks)
std_dev = np.std(marks)
variance = np.var(marks)

# Mathematical operations
squared = np.square(marks)
square_root = np.sqrt(marks)
logarithm = np.log(marks)

# Bitwise operators
bitwise_and = np.bitwise_and(ages, marks)
bitwise_or = np.bitwise_or(ages, marks)
bitwise_xor = np.bitwise_xor(ages, marks)

# Copying and viewing arrays
marks_copy = marks.copy()
marks_view = marks.view()

# Data stacking, searching, sorting, counting, broadcasting
stacked_data = np.column_stack((names, ages, genders, marks))
search_index = np.where(names == 'Emma')[0]
sorted_names = np.sort(names)
unique_names, unique_counts = np.unique(names, return_counts=True)
broadcasted_array = np.broadcast_to(marks, (len(names), len(names)))

# Print the results
print("Matrix operations:")
print("Transpose:\n", transposed_matrix)
print("Sum:", matrix_sum)
print("Mean:", matrix_mean)
print("Product:", matrix_product)

print("\nHorizontal and vertical stacking:")
print("Horizontal stack:\n", horizontal_stack)
print("Vertical stack:\n", vertical_stack)

print("\nCustom sequence generation:")
print("Sequence:", sequence)

print("Arithmetic and statistical operations:")
print("Addition:", addition)
print("Subtraction:", subtraction)
print("Mean:", mean)
print("Standard Deviation:", std_dev)
print("Variance:", variance)

print("Mathematical operations:")
print("Squared:", squared)
print("Square Root:", square_root)
print("Logarithm:", logarithm)

print("Bitwise operators:")
print("Bitwise AND:", bitwise_and)
print("Bitwise OR:", bitwise_or)
print("Bitwise XOR:", bitwise_xor)

print("Copying and viewing arrays:")
print("Copy:", marks_copy)
print("View:", marks_view)

print("Data stacking, searching, sorting, counting, broadcasting:")
print("Stacked Data:", stacked_data)
print("Search Index:", search_index)
print("Sorted Names:", sorted_names)
print("Unique Names:", unique_names)
print("Unique Counts:", unique_counts)
print("Broadcasted Array:", broadcasted_array)

import numpy as np

#dataset
names = np.array(['John', 'Emma', 'Michael', 'Sophia'])
ages = np.array([20, 22, 19, 21])
genders = np.array(['M', 'F', 'M', 'F'])
marks = np.array([85, 90, 78, 92])

#All Matrix operations
matrix = np.array([ages, marks])
transposed_matrix = np.transpose(matrix)
matrix_sum = np.sum(matrix)
matrix_mean = np.mean(matrix)
matrix_product = np.prod(matrix)

print("These are all the matrix operations:")
print("==========================================")
print("Transpose:\n", transposed_matrix)
print("==========================================")
print("Sum:", matrix_sum)
print("==========================================")
print("Mean:", matrix_mean)
print("==========================================")
print("Product:", matrix_product)
print("==========================================")

import numpy as np

#dataset
names = np.array(['John', 'Emma', 'Michael', 'Sophia'])
ages = np.array([20, 22, 19, 21])
genders = np.array(['M', 'F', 'M', 'F'])
marks = np.array([85, 90, 78, 92])

# Horizontal
horizontal_stack =
# Vertical
vertical_stack = n

print("Horizontal stack:")
print()
print("Vertical stack:")
print()

import numpy as np

#dataset
names = np.array(['John', 'Emma', 'Michael', 'Sophia'])
ages = np.array([20, 22, 19, 21])
genders = np.array(['M', 'F', 'M', 'F'])
marks = np.array([85, 90, 78, 92])

# Custom sequence generation
sequence = np.arange(0, 10, 2)

print("Custom sequence generation:")
print("Sequence:", sequence)

import numpy as np

#dataset
names = np.array(['John', 'Emma', 'Michael', 'Sophia'])
ages = np.array([20, 22, 19, 21])
genders = np.array(['M', 'F', 'M', 'F'])
marks = np.array([85, 90, 78, 92])

# Arithmetic and statistical operations
addition = np.add(ages, marks)
subtraction = np.subtract(ages, marks)
mean = np.mean(marks)
std_dev = np.std(marks)
variance = np.var(marks)

print("Arithmetic and statistical operations:")
print("==================================")
print("Addition:", addition)
print("==================================")
print("Subtraction:", subtraction)
print("==================================")
print("Mean:", mean)
print("==================================")
print("Standard Deviation:", std_dev)
print("==================================")
print("Variance:", variance)
print("==================================")



import numpy as np
names = np.array(['John', 'Emma', 'Michael', 'Sophia'])
ages = np.array([20, 22, 19, 21])
genders = np.array(['M', 'F', 'M', 'F'])
marks = np.array([85, 90, 78, 92])

# Mathematical operations
squared = np.square(marks)
square_root = np.sqrt(marks)
logarithm = np.log(marks)

print("Mathematical operations:")
print("==================================")
print("Squared:", squared)
print("==================================")
print("Square Root:", square_root)
print("==================================")
print("Logarithm:", logarithm)
print("==================================")

import numpy as np

#dataset
names = np.array(['John', 'Emma', 'Michael', 'Sophia'])
ages = np.array([20, 22, 19, 21])
genders = np.array(['M', 'F', 'M', 'F'])
marks = np.array([85, 90, 78, 92])

# Bitwise operators
bitwise_and = np.bitwise_and(ages, marks)
bitwise_or = np.bitwise_or(ages, marks)
bitwise_xor = np.bitwise_xor(ages, marks)
bitwise_not = np.bitwise_not(ages, marks)

print("Bitwise operators:")
print("==================================")
print("Bitwise AND:", bitwise_and)
print("==================================")
print("Bitwise OR:", bitwise_or)
print("==================================")
print("Bitwise XOR:", bitwise_xor)
print("==================================")
print("Bitwise NOT:", bitwise_not)
print("==================================")

import numpy as np

#dataset
names = np.array(['John', 'Emma', 'Michael', 'Sophia'])
ages = np.array([20, 22, 19, 21])
genders = np.array(['M', 'F', 'M', 'F'])
marks = np.array([85, 90, 78, 92])

# Copying and viewing arrays
marks_copy = marks.copy()
marks_view = marks.view()

print("Copying and viewing arrays:")
print("==================================")
print("Copy:", marks_copy)
print("==================================")
print("View:", marks_view)
print("==================================")

import numpy as np

#dataset
names = np.array(['John', 'Emma', 'Michael', 'Sophia'])
ages = np.array([20, 22, 19, 21])
genders = np.array(['M', 'F', 'M', 'F'])
marks = np.array([85, 90, 78, 92])

# Data stacking, searching, sorting, counting, broadcasting
stacked_data = np.column_stack((names, ages, genders, marks))
search_index = np.where(names == 'Emma')[0]
sorted_names = np.sort(names)
unique_names, unique_counts = np.unique(names, return_counts=True)
broadcasted_array = np.broadcast_to(marks, (len(names), len(names)))

print("Data stacking, searching, sorting, counting, broadcasting:")
print("==================================")
print("Stacked Data:", stacked_data)
print("==================================")
print("Search Index:", search_index)
print("==================================")
print("Sorted Names:", sorted_names)
print("==================================")
print("Unique Names:", unique_names)
print("==================================")
print("Unique Counts:", unique_counts)
print("==================================")
print("Broadcasted Array:", broadcasted_array)
print("==================================")

import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/Book(2).xlsx')
df

import pandas as pd
import matplotlib.pyplot as plt
df=pd.read_excel(r'/content/drive/MyDrive/electronic-card-transactions-april-2023-csv-tables.xlsx')
df

x_axis = df['STATUS']
y_axis = df['UNITS']
plt.bar(x_axis, y_axis, width=0.1)
plt.xlabel("X-Axis")
plt.ylabel("Y-Axis")
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
v = df['Magnitude'].head()
l = df['Group'].head()
plt.pie(v,labels=l)
mag_data = df["Magnitude"]
gr_data = df["Group"]
colors = ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#8c564b"]
explode = (0.1, 0, 0, 0, 0)
plt.pie(gr_data, labels=mag_data, explode=explode, colors=colors,
autopct='%1.1f%%', shadow=True, startangle=140)

plt.show()

import matplotlib.pyplot as plt
import pandas as pd
v = df['Magnitude'].head()
l = df['Group'].head()
plt.pie(v,labels=l)
country_data = df["country"]
medal_data = df["gold_medal"]
colors = ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#8c564b"]
explode = (0.1, 0, 0, 0, 0)
plt.pie(medal_data, labels=country_data, explode=explode, colors=colors,
autopct='%1.1f%%', shadow=True, startangle=140)

plt.show()

import pandas as pd
def fun (data):
  return(data *10)
df1 = pd.read_excel('/content/drive/MyDrive/electronic-card-transactions-april-2023-csv-tables.xlsx')

# groupby in python
a = df1.groupby('Magnitude')['UNITS'].count()==6
b = df1. groupby('Magnitude')['UNITS'].head()
print(a)
print(b)

# aggrigate in python
# Dataframe. aggregate() function is used to apply some aggregation Across one or more column.
# sum: Return the sum of the values for the requested axis
# min: Return the minimum of the values for the requested axis
# max: Return the maximum of the values for the requested axis

c = df1.aggregate(['sum', 'min', 'max'])
print(c)

c.plot()

import pandas as pd
import matplotlib.pyplot as plt
f=df1['Magnitude'].head()
g=df1['STATUS'].head()
plt.pie(f,labels=g,
        autopct='%1.1f%%',shadow=True,startangle=140)
plt.show()

#costum functions can be created for new coloumns
import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/anushkahobbies.csv.xlsx')
print(df)

df["Name_uppercase"]=df["Name"].map(lambda Name :Name.upper() )

#Grains
import matplotlib.pyplot as plt
import pandas as pd
df=pd.read_excel(r'/content/drive/MyDrive/anushkahobbies.csv.xlsx')
print(df)
print('\n')
#1
a = df.groupby('Age')['Projects'].count()==3
b = df.groupby('Age')['Projects'].head()
print(a)
print(b)
print('\n')
#2
female_students= df[df['Gender']=='female']
print(female_students)
print('\n')

#3
print(df.head())
print('\n')

#4
avg_age_in_uni=df.groupby('University')['Age'].mean()
print(avg_age_in_uni)
print('\n')

#5
hobby_counts=df['Hobbies'].unique()
print(hobby_counts)

import matplotlib.pyplot as plt
import pandas as pd
x=df.groupby('Age')['Projects'].count()==3
y=df.groupby('Age')['Projects'].head()
def plot_bar(x,y):
  plt.show()
plot_bar(x,y)

import matplotlib.pyplot as plt
import pandas as pd
x=df.groupby('Age')['Projects'].count()==3
y=df.groupby('Age')['Projects'].head()
plt.pie(x,labels=y,
        autopct='%1.1f%%',shadow=True,startangle=140)